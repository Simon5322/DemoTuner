[
  ('max_worker_processes', '4x available CPU', 'general recommendation for vanilla PostgreSQL'),
  ('max_worker_processes', '3 + timescaledb.max_background_workers + max_parallel_workers', 'Timescale workload recommendation'),
  ('max_parallel_workers', 'number of CPUs available', 'good default recommendation for typical workloads'),
  ('max_parallel_workers', 'increase', 'improve query performance for large queries'),
  ('max_parallel_workers_per_gather', 'quarter to a half of your CPU count', 'good option for CPU-heavy queries'),
  ('max_parallel_workers_per_gather', 'increase', 'make queries run faster'),
  ('max_parallel_maintenance_workers', 'third of CPU count', 'recommended value to leave resources for regular query processing'),
  ('max_parallel_maintenance_workers', 'increase over the recommended value', 'help for slow CREATE INDEX and VACUUM operations'),
  ('autovacuum_max_workers', '3', 'default value for many workloads'),
  ('autovacuum_max_workers', 'increase', 'for large growing databases'),
  ('autovacuum_max_workers', '10', 'default setting in Timescale')
][('max_connections', 'increase', 'database needs many short-lived connections'),
('shared_buffers', '25% of RAM', 'common rule of thumb for page cache, can be varied based on use cases and workloads'),
('work_mem', '(25% of RAM) / max_connections', 'heavy queries that are not performing as expected, especially relevant for analytics')]
[('max_connections', '25', 'Timescale compute plan with smallest number of CPUs'),
('max_connections', '500', 'Timescale compute plan with largest number of CPUs'), 
('shared_buffers', '25% RAM', 'Good starting point for general use cases'), 
('shared_buffers', '>40% RAM', 'If mostly heavy reads, cautiously increase beyond recommended value'), 
('work_mem', '(25% RAM) / max_connections', 'For heavy queries and analytics workloads')]1)
('maintenance_work_mem', '0.05 * total RAM', 'performing maintenance operations such as VACUUM, CREATE INDEX, and ALTER TABLE, or database restoration activities using tools like pg_restore. This recommendation is valid when the maintenance operations are taking too long to execute and need fine-tuning. It is suitable for Timescale databases and can be set to about 5% of the total system RAM.')
('max_locks_per_transaction', 'double the maximum number of partitions (chunks) in a hypertable', 'using Timescale and working with hypertables. This recommendation is valid for large databases with complex transactions or when using extensions or features that use a higher number of locks (e.g., PostGIS or Timescale). The recommended value accounts for the fact that Timescale typically uses at least as many locks as there are chunks in the hypertable or twice as many if an index is used.')
('max_parallel_workers_per_gather', 'limit parallelism for individual queries', 'experiencing out-of-memory errors due to high parallelism in queries. This recommendation suggests reducing the max_parallel_workers_per_gather parameter to limit the parallelism for individual queries.')


('maintenance_work_mem', '0.05 * total RAM', 'maintenance operations such as VACUUM, CREATE INDEX, and ALTER TABLE, as well as database restoration activities using tools like pg_restore')
('max_locks_per_transaction', 'double the maximum number of partitions (chunks) you can reasonably anticipate having in a hypertable', 'when using Timescale and a hypertable')
('max_parallel_workers', 'reduce to the number of CPUs minus one or two', 'when parallelism is causing exhaustion of dynamic shared memory')
('shared_buffers', 'not raising it over 40 % of your total system RAM', 'when facing out-of-memory errors and setting it too high')
('max_connections', 'limit the number of connections based on application requirements', 'when facing out-of-memory errors due to high simultaneous connections')