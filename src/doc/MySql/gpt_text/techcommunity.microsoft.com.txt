('innodb_buffer_pool_size', 'increase', 'when there is sufficient memory available and the database primarily performs read-heavy operations')
('innodb_log_file_size', 'increase', 'when there is a high number of write operations and frequent checkpoints')
('innodb_flush_log_at_trx_commit', 'decrease', 'for systems that require higher write performance at the cost of potential data loss in case of a crash')
('query_cache_size', 'decrease', 'in high-concurrency environments where the cache contention becomes a bottleneck')
('max_connections', 'increase', 'for systems with a large number of concurrent client connections')
('tmp_table_size', 'increase', 'when there is a need for larger temporary tables during complex queries')
('key_buffer_size', 'increase', 'for systems with a high number of read and write operations on MyISAM tables')
('optimizer_switch', 'adjust', 'based on the specific workload characteristics and query patterns')('created_tmp_disk_tables', 'increase', 'the server creates the table on disk either initially or by converting an in-memory table')
('created_tmp_tables', 'increase', 'queries performing a join or sort without the benefit of an index require the creation of a temporary table in memory')
('percentage of created_tmp_disk_tables / (created_tmp_disk_tables + created_tmp_tables)', 'decrease', 'ideally less than 25%')
('tmp_table_size', 'modify', 'if the percentage is 25% or greater')
('max_heap_table_size', 'modify', 'if the percentage is 25% or greater')[('tmp_table_size', 'increase', 'heavy contention on the same table'),
 ('max_heap_table_size', 'increase', 'heavy contention on the same table'),
 ('opened_tables', 'increase', 'performance monitoring'),
 ('table_open_cache', 'increase', 'heavy-read scenario'),
 ('table_open_cache', 'decrease', 'optimize value using formula')][('join_buffer_size', 'increase', "read-heavy workload with tables that don't have indexes"),
('table_open_cache_instances', 'increase', 'single table is experiencing a lot of heavy contentions of queries against it'),
('table_open_cache_instances', 'increase', '150 active connections and 250 total tables, especially while testing a high-read scenario'),
('preload_buffer_size', 'benefit', "queries are already optimized for JOINs and ORDER BYS"),
('join_buffer_size', 'decrease', "setting the value of the 'join_buffer_size' parameter too high can cause significant performance drops because the majority of the buffer_size allocated will not be used or required")][('sort_buffer_size', 'increase', "read-heavy workload with tables that don't have indexes"), 
 ('sort_buffer_size', 'increase', "if the metric 'sort_merge_passes' increases quickly"),
 ('sort_buffer_size', 'increase', "if the value is set too high, it will affect the performance for a smaller workload in which queries do not use all of the 'sort_buffer_size'"),
 ('Preload_buffer_size', 'increase', 'when your workload is using indexes, as does an average WordPress workload'),
 ('Innodb_lru_scan_depth', 'increase', ''),
 ('Innodb_purge_threads', 'increase', '')]